package fmt

func PrintStr {
    [args]
    s size=8
    [saved regs]
    <?> size=4 reg=1
    <?> size=4 reg=2
    <?> size=4 reg=3
    [locals]
    _ size=4
    err size=4
    <0> size=4
    <1> size=4
    <2> size=4
    <3> size=4
    <4> size=1
    B2:
        [<1> <2>] = Write(1,s)
        _ = <1>
        err = <2>
        <4> = err != 0
        if !<4> goto B4
    B3:
        [] = asm/builtin.Panic()
    B4:
    ----
    B2:
        addi r1 sp -8
        addi r2 sp 44
        ori r3 r0 0x0008
        jal 0
        ori r1 r0 0x0001
        jal 0
        sw r1 sp 12
        sw r2 sp 8
        lw r4 sp 12
        sw r4 sp 24
        lw r4 sp 8
        sw r4 sp 20
        lw r4 sp 20
        ori r1 r0 0x0000
        xor r4 r4 r1
        sltu r4 r0 r4
        sb r4 sp 3
        lb r4 sp 3
        beq r0 r4 4
        beq r0 r4 4
    B3:
        jal 0
    B4:
}

func PrintChar {
    [args]
    c size=1 reg=1
    [saved regs]
    <?> size=4 reg=2
    <?> size=4 reg=3
    [locals]
    buf size=1
    <0> size=4
    <1> size=1
    <2> size=4
    <3> size=1
    <4> size=4
    <5> size=4
    <6> size=4
    <7> size=8
    <8> size=4
    B2:
        buf = 0
        <1> = <0 0
        if !<1> goto B4
    B3:
        [] = asm/builtin.Panic()
    B4:
        <2> = & buf
        <3> = 0 u< 1
        if <3> goto B6
    B5:
        [] = asm/builtin.Panic()
    B6:
        <4> = 0 * 1
        <4> = <2> + <4>
        *<4> = c
        <5> = & buf
        <6> = 1 - 0
        <8> = & <7>
        *<8> = <5>
        *(<8>+4) = <6>
        [] = PrintStr(<7>)
    ----
    B2:
        sb r0 sp 43
        ori r4 r0 0x0000
        slt r4 r4 r0
        sb r4 sp 35
        lbu r4 sp 35
        beq r0 r4 4
        beq r0 r4 4
    B3:
        jal 0
    B4:
        addi r4 sp 43
        sw r4 sp 28
        ori r4 r0 0x0000
        ori r1 r0 0x0001
        sltu r4 r4 r1
        sb r4 sp 27
        lbu r4 sp 27
        bne r0 r4 4
        bne r0 r4 4
    B5:
        jal 0
    B6:
        ori r4 r0 0x0000
        ori r1 r0 0x0001
        mul r4 r4 r1
        sw r4 sp 20
        lw r4 sp 28
        lw r1 sp 20
        add r4 r4 r1
        sw r4 sp 20
        lb r4 sp 55
        lw r1 sp 20
        sb r4 r1
        addi r4 sp 43
        sw r4 sp 16
        ori r4 r0 0x0001
        ori r1 r0 0x0000
        sub r4 r4 r1
        sw r4 sp 12
        addi r4 sp 4
        sw r4 sp
        lw r4 sp 16
        lw r1 sp
        sw r4 r1
        lw r4 sp 12
        lw r1 sp
        sw r4 r1 4
        addi r1 sp -8
        addi r2 sp 4
        ori r3 r0 0x0008
        jal 0
        jal 0
}

func PrintInt {
    [args]
    i size=4 reg=1
    [saved regs]
    <?> size=4 reg=2
    <?> size=4 reg=3
    [locals]
    <0> size=4
    <1> size=1
    <2> size=4
    <3> size=4
    B2:
        <1> = i < 0
        if !<1> goto B4
    B3:
        [] = PrintChar(45)
        <2> = - i
        [] = PrintInt(<2>)
        goto B5
    B4:
        <3> = cast i
        [] = PrintUint(<3>)
    B5:
    ----
    B2:
        lw r4 sp 24
        ori r1 r0 0x0000
        slt r4 r4 r1
        sb r4 sp 11
        lb r4 sp 11
        beq r0 r4 32
        beq r0 r4 32
    B3:
        ori r1 r0 0x002d
        jal 0
        lw r4 sp 24
        sub r4 r0 r4
        sw r4 sp 4
        lw r1 sp 4
        jal 0
        j 16
        j 16
    B4:
        lw r4 sp 24
        sw r4 sp
        lw r1 sp
        jal 0
    B5:
}

func PrintUint {
    [args]
    i size=4 reg=1
    [saved regs]
    <?> size=4 reg=2
    <?> size=4 reg=3
    [locals]
    <0> size=4
    <1> size=1
    buf size=10
    n size=4
    <2> size=4
    <3> size=4
    <4> size=1
    <5> size=1
    <6> size=4
    <7> size=1
    <8> size=4
    <9> size=4
    <10> size=4
    <11> size=1
    <12> size=1
    <13> size=1
    <14> size=4
    <15> size=1
    i size=4
    <16> size=4
    <17> size=4
    <18> size=4
    <19> size=1
    <20> size=1
    c size=1
    <21> size=1
    <22> size=4
    <23> size=1
    <24> size=4
    <25> size=1
    <26> size=4
    <27> size=1
    <28> size=4
    <29> size=4
    <30> size=4
    <31> size=4
    <32> size=1
    <33> size=4
    <34> size=1
    <35> size=4
    <36> size=4
    <37> size=4
    <38> size=4
    <39> size=1
    <40> size=4
    <41> size=1
    <42> size=4
    <43> size=4
    <44> size=1
    <45> size=1
    <46> size=1
    <47> size=4
    <48> size=8
    <49> size=4
    B2:
        <1> = i == 0
        if !<1> goto B4
    B3:
        [] = PrintChar(48)
        goto B1
    B5:
    B4:
        buf = 0
        n = 0
    B6:
        <4> = i u> 0
        if !<4> goto B8
    B7:
        <5> = <0 n
        if !<5> goto B10
    B9:
        [] = asm/builtin.Panic()
    B10:
        <6> = & buf
        <7> = n u< 10
        if <7> goto B12
    B11:
        [] = asm/builtin.Panic()
    B12:
        <8> = n * 1
        <8> = <6> + <8>
        <11> = 10 == 0
        if !<11> goto B14
    B13:
        [] = asm/builtin.Panic()
    B14:
        <10> = i % 10
        <12> = cast <10>
        <13> = <12> + 48
        *<8> = <13>
        <15> = 10 == 0
        if !<15> goto B16
    B15:
        [] = asm/builtin.Panic()
    B16:
        i = i / 10
        n = n + 1
        goto B6
    B8:
        i = 0
    B17:
        <19> = 2 == 0
        if !<19> goto B21
    B20:
        [] = asm/builtin.Panic()
    B21:
        <18> = n / 2
        <20> = i < <18>
        if !<20> goto B19
    B18:
        <21> = <0 i
        if !<21> goto B23
    B22:
        [] = asm/builtin.Panic()
    B23:
        <22> = & buf
        <23> = i u< 10
        if <23> goto B25
    B24:
        [] = asm/builtin.Panic()
    B25:
        <24> = i * 1
        <24> = <22> + <24>
        c = *<24>
        <25> = <0 i
        if !<25> goto B27
    B26:
        [] = asm/builtin.Panic()
    B27:
        <26> = & buf
        <27> = i u< 10
        if <27> goto B29
    B28:
        [] = asm/builtin.Panic()
    B29:
        <28> = i * 1
        <28> = <26> + <28>
        <30> = n - 1
        <31> = <30> - i
        <32> = <0 <31>
        if !<32> goto B31
    B30:
        [] = asm/builtin.Panic()
    B31:
        <33> = & buf
        <34> = <31> u< 10
        if <34> goto B33
    B32:
        [] = asm/builtin.Panic()
    B33:
        <35> = <31> * 1
        <35> = <33> + <35>
        *<28> = *<35>
        <37> = n - 1
        <38> = <37> - i
        <39> = <0 <38>
        if !<39> goto B35
    B34:
        [] = asm/builtin.Panic()
    B35:
        <40> = & buf
        <41> = <38> u< 10
        if <41> goto B37
    B36:
        [] = asm/builtin.Panic()
    B37:
        <42> = <38> * 1
        <42> = <40> + <42>
        *<42> = c
        i = i + 1
        goto B17
    B19:
        <43> = & buf
        <44> = <0 n
        if !<44> goto B39
    B38:
        [] = asm/builtin.Panic()
    B39:
        <45> = n u<= 10
        if <45> goto B41
    B40:
        [] = asm/builtin.Panic()
    B41:
        <46> = 0 u<= n
        if <46> goto B43
    B42:
        [] = asm/builtin.Panic()
    B43:
        <47> = n - 0
        <49> = & <48>
        *<49> = <43>
        *(<49>+4) = <47>
        [] = PrintStr(<48>)
    ----
    B2:
        lw r4 sp 200
        ori r1 r0 0x0000
        xor r4 r4 r1
        sltu r4 r0 r4
        xori r4 r4 0x0001
        sb r4 sp 187
        lb r4 sp 187
        beq r0 r4 12
        beq r0 r4 12
    B3:
        ori r1 r0 0x0030
        jal 0
        j 1036
        j 1036
    B5:
    B4:
        addi r1 sp 177
        ori r2 r0 0x000a
        jal 0
        ori r4 r0 0x0000
        sw r4 sp 172
    B6:
        lw r4 sp 200
        ori r1 r0 0x0000
        sltu r4 r1 r4
        sb r4 sp 163
        lb r4 sp 163
        beq r0 r4 252
        beq r0 r4 252
    B7:
        lw r4 sp 172
        slt r4 r4 r0
        sb r4 sp 162
        lbu r4 sp 162
        beq r0 r4 4
        beq r0 r4 4
    B9:
        jal 0
    B10:
        addi r4 sp 177
        sw r4 sp 156
        lw r4 sp 172
        ori r1 r0 0x000a
        sltu r4 r4 r1
        sb r4 sp 155
        lbu r4 sp 155
        bne r0 r4 4
        bne r0 r4 4
    B11:
        jal 0
    B12:
        lw r4 sp 172
        ori r1 r0 0x0001
        mul r4 r4 r1
        sw r4 sp 148
        lw r4 sp 156
        lw r1 sp 148
        add r4 r4 r1
        sw r4 sp 148
        ori r4 r0 0x000a
        ori r1 r0 0x0000
        xor r4 r4 r1
        sltu r4 r0 r4
        xori r4 r4 0x0001
        sb r4 sp 139
        lbu r4 sp 139
        beq r0 r4 4
        beq r0 r4 4
    B13:
        jal 0
    B14:
        lw r4 sp 200
        ori r1 r0 0x000a
        mod r4 r4 r1
        sw r4 sp 140
        lw r4 sp 140
        sb r4 sp 138
        lb r4 sp 138
        ori r1 r0 0x0030
        add r4 r4 r1
        sb r4 sp 137
        lb r4 sp 137
        lw r1 sp 148
        sb r4 r1
        ori r4 r0 0x000a
        ori r1 r0 0x0000
        xor r4 r4 r1
        sltu r4 r0 r4
        xori r4 r4 0x0001
        sb r4 sp 131
        lbu r4 sp 131
        beq r0 r4 4
        beq r0 r4 4
    B15:
        jal 0
    B16:
        lw r4 sp 200
        ori r1 r0 0x000a
        div r4 r4 r1
        sw r4 sp 200
        lw r4 sp 172
        ori r1 r0 0x0001
        add r4 r4 r1
        sw r4 sp 172
        j -276
        j -276
    B8:
        ori r4 r0 0x0000
        sw r4 sp 124
    B17:
        ori r4 r0 0x0002
        ori r1 r0 0x0000
        xor r4 r4 r1
        sltu r4 r0 r4
        xori r4 r4 0x0001
        sb r4 sp 111
        lbu r4 sp 111
        beq r0 r4 4
        beq r0 r4 4
    B20:
        jal 0
    B21:
        lw r4 sp 172
        ori r1 r0 0x0002
        div r4 r4 r1
        sw r4 sp 112
        lw r4 sp 124
        lw r1 sp 112
        slt r4 r4 r1
        sb r4 sp 110
        lb r4 sp 110
        beq r0 r4 492
        beq r0 r4 492
    B18:
        lw r4 sp 124
        slt r4 r4 r0
        sb r4 sp 108
        lbu r4 sp 108
        beq r0 r4 4
        beq r0 r4 4
    B22:
        jal 0
    B23:
        addi r4 sp 177
        sw r4 sp 104
        lw r4 sp 124
        ori r1 r0 0x000a
        sltu r4 r4 r1
        sb r4 sp 103
        lbu r4 sp 103
        bne r0 r4 4
        bne r0 r4 4
    B24:
        jal 0
    B25:
        lw r4 sp 124
        ori r1 r0 0x0001
        mul r4 r4 r1
        sw r4 sp 96
        lw r4 sp 104
        lw r1 sp 96
        add r4 r4 r1
        sw r4 sp 96
        lw r4 sp 96
        lbu r4 r4
        sb r4 sp 109
        lw r4 sp 124
        slt r4 r4 r0
        sb r4 sp 95
        lbu r4 sp 95
        beq r0 r4 4
        beq r0 r4 4
    B26:
        jal 0
    B27:
        addi r4 sp 177
        sw r4 sp 88
        lw r4 sp 124
        ori r1 r0 0x000a
        sltu r4 r4 r1
        sb r4 sp 87
        lbu r4 sp 87
        bne r0 r4 4
        bne r0 r4 4
    B28:
        jal 0
    B29:
        lw r4 sp 124
        ori r1 r0 0x0001
        mul r4 r4 r1
        sw r4 sp 80
        lw r4 sp 88
        lw r1 sp 80
        add r4 r4 r1
        sw r4 sp 80
        lw r4 sp 172
        ori r1 r0 0x0001
        sub r4 r4 r1
        sw r4 sp 72
        lw r4 sp 72
        lw r1 sp 124
        sub r4 r4 r1
        sw r4 sp 68
        lw r4 sp 68
        slt r4 r4 r0
        sb r4 sp 67
        lbu r4 sp 67
        beq r0 r4 4
        beq r0 r4 4
    B30:
        jal 0
    B31:
        addi r4 sp 177
        sw r4 sp 60
        lw r4 sp 68
        ori r1 r0 0x000a
        sltu r4 r4 r1
        sb r4 sp 59
        lbu r4 sp 59
        bne r0 r4 4
        bne r0 r4 4
    B32:
        jal 0
    B33:
        lw r4 sp 68
        ori r1 r0 0x0001
        mul r4 r4 r1
        sw r4 sp 52
        lw r4 sp 60
        lw r1 sp 52
        add r4 r4 r1
        sw r4 sp 52
        lw r4 sp 52
        lbu r4 r4
        lw r1 sp 80
        sb r4 r1
        lw r4 sp 172
        ori r1 r0 0x0001
        sub r4 r4 r1
        sw r4 sp 44
        lw r4 sp 44
        lw r1 sp 124
        sub r4 r4 r1
        sw r4 sp 40
        lw r4 sp 40
        slt r4 r4 r0
        sb r4 sp 39
        lbu r4 sp 39
        beq r0 r4 4
        beq r0 r4 4
    B34:
        jal 0
    B35:
        addi r4 sp 177
        sw r4 sp 32
        lw r4 sp 40
        ori r1 r0 0x000a
        sltu r4 r4 r1
        sb r4 sp 31
        lbu r4 sp 31
        bne r0 r4 4
        bne r0 r4 4
    B36:
        jal 0
    B37:
        lw r4 sp 40
        ori r1 r0 0x0001
        mul r4 r4 r1
        sw r4 sp 24
        lw r4 sp 32
        lw r1 sp 24
        add r4 r4 r1
        sw r4 sp 24
        lb r4 sp 109
        lw r1 sp 24
        sb r4 r1
        lw r4 sp 124
        ori r1 r0 0x0001
        add r4 r4 r1
        sw r4 sp 124
        j -568
        j -568
    B19:
        addi r4 sp 177
        sw r4 sp 20
        lw r4 sp 172
        slt r4 r4 r0
        sb r4 sp 19
        lbu r4 sp 19
        beq r0 r4 4
        beq r0 r4 4
    B38:
        jal 0
    B39:
        lw r4 sp 172
        ori r1 r0 0x000a
        sltu r4 r1 r4
        xori r4 r4 0x0001
        sb r4 sp 18
        lbu r4 sp 18
        bne r0 r4 4
        bne r0 r4 4
    B40:
        jal 0
    B41:
        ori r4 r0 0x0000
        lw r1 sp 172
        sltu r4 r1 r4
        xori r4 r4 0x0001
        sb r4 sp 17
        lbu r4 sp 17
        bne r0 r4 4
        bne r0 r4 4
    B42:
        jal 0
    B43:
        lw r4 sp 172
        ori r1 r0 0x0000
        sub r4 r4 r1
        sw r4 sp 12
        addi r4 sp 4
        sw r4 sp
        lw r4 sp 20
        lw r1 sp
        sw r4 r1
        lw r4 sp 12
        lw r1 sp
        sw r4 r1 4
        addi r1 sp -8
        addi r2 sp 4
        ori r3 r0 0x0008
        jal 0
        jal 0
}

func Println {
    [saved regs]
    <?> size=4 reg=1
    <?> size=4 reg=2
    <?> size=4 reg=3
    B2:
        [] = PrintChar(10)
    ----
    B2:
        ori r1 r0 0x000a
        jal 0
}
